cmake_minimum_required(VERSION 3.20)
project(projet LANGUAGES C)
set(C_STANDARD 11)

find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
    option(GIT_SUBMODULE "Check submodules during build" ON)
else()
    message(STATUS "Git not found please install git.")
endif()

file(GLOB SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
include_directories(projet PRIVATE "external/list")

find_package(PkgConfig QUIET)
if(PKGCONFIG_FOUND)
    pkg_check_modules(SDL2 sdl2)
    pkg_check_modules(SDL2_TTF SDL2_ttf)
    pkg_check_modules(SDL2_image SDL2_image)
    if(SDL2_FOUND AND SDL2_TTF_FOUND AND SDL2_image_FOUND)
        set(USE_EMBED_SDL off)
    else()
        set(USE_EMBED_SDL on)
    endif()
else()
    set(USE_EMBED_SDL on)
endif()

if(USE_EMBED_SDL)
    message(STATUS "SDL2, SDL2_TTF and SDL2_image not found, downloading library")
    if(GIT_SUBMODULE)
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive --remote WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init --recursive failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
        endif()
    else()
        message(STATUS "Git or .git folder not found please clone the repository")
    endif()
    add_subdirectory(external)
    include_directories(projet PRIVATE "external/SDL/include")
    include_directories(projet PRIVATE "external/SDL_image/include")
    include_directories(projet PRIVATE "external/SDL_ttf")
else()
    message(STATUS "Found SDL2, SDL2_TTF and SDL2_image")
    include_directories(${SDL2_INCLUDE_DIRS} ${SDL2_TTF_INCLUDE_DIRS} ${SDL2_image_INCLUDE_DIRS})
    if(MSVC)
        add_compile_options(/W4)
    else()
        add_compile_options(-Wall -Wextra)
    endif()
endif()

add_executable(projet ${SOURCES})
if (USE_EMBED_SDL)
    target_link_libraries(projet m SDL2main SDL2_ttf SDL2_image)
else()
    target_link_libraries(projet m SDL2main SDL2 SDL2_ttf SDL2_image)
endif()
